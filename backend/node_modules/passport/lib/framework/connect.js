/**
 * Module dependencies.
 */
var initialize = require('../middleware/initialize')
, authenticate = require('../middleware/authenticate');

/**
 * Framework support for Connect/Express.
 *
 * This module provides support for using Passport with Express.  It exposes
 * middleware that conform to the `fn(req, res, next)` signature and extends
 * Node's built-in HTTP request object with useful authentication-related
 * functions.
 *
 * @return {Object}
 * @api protected
 */
exports = module.exports = function() {

  // HTTP extensions.
  exports.__monkeypatchNode();

  return {
    initialize: initialize,
    authenticate: authenticate
  };
};

exports.__monkeypatchNode = function() {
//  var http = require('@angular/common/http');
  //var http = require('http');
  //console.log(http)
  var http = require('http');

  var IncomingMessageExt = require('../http/request');
  //console.log(http);
  //console.log(IncomingMessageExt); //This works
  //var IncomingMessageExt = require('@angular/common/http/HttpRequest');
  //http.IncomingMessage.prototype; //printing this shows something
  //console.log(http.IncomingMessage);
//  console.log("Here is the info:");/
//  console.log(typeof(http.IncomingMessage));
  //console.log(http.IncomingMessage); //undefined

 //Object.create(http.IncomingMessage.prototype)
  //var req = http.IncomingMessage.prototype.login;
  //req.login = 'x';
//  console.log(req.login);
//  console.log(http.IncomingMessage.prototype.logIn);
//  req.logIn = IncomingMessageExt.logIn;
//  req.logout =
//  req.logOut = IncomingMessageExt.logOut;
//  req.isAuthenticated = IncomingMessageExt.isAuthenticated;
//  req.isUnauthenticated = IncomingMessageExt.isUnauthenticated;
try {
  http.IncomingMessage.prototype.login =
  http.IncomingMessage.prototype.logIn = IncomingMessageExt.logIn;
  http.IncomingMessage.prototype.logout =
  http.IncomingMessage.prototype.logOut = IncomingMessageExt.logOut;
  http.IncomingMessage.prototype.isAuthenticated = IncomingMessageExt.isAuthenticated;
  http.IncomingMessage.prototype.isUnauthenticated = IncomingMessageExt.isUnauthenticated;
}
catch(err) {
  console.log(err);
}

};
